// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"NetGuardServer/controllers"
	"NetGuardServer/repository"
	"NetGuardServer/services"
	"github.com/google/wire"
)

// Injectors from wire.go:

// InitializeApp initializes the entire application with dependency injection
func InitializeApp() (*App, error) {
	userRepository := repository.NewUserRepository()
	authService := services.NewAuthService(userRepository)
	authController := controllers.NewAuthController(authService)
	serverRepository := repository.NewServerRepository()
	serverService := services.NewServerService(serverRepository)
	notificationService := services.NewNotificationService()
	serverController := controllers.NewServerController(serverService, notificationService)
	historyRepository := repository.NewHistoryRepository()
	historyService := services.NewHistoryService(historyRepository)
	historyController := controllers.NewHistoryController(historyService)
	app := &App{
		AuthController:    authController,
		ServerController:  serverController,
		HistoryController: historyController,
	}
	return app, nil
}

// wire.go:

// Provider set for repositories
var repositorySet = wire.NewSet(repository.NewUserRepository, repository.NewServerRepository, repository.NewHistoryRepository)

// Provider set for services
var serviceSet = wire.NewSet(services.NewAuthService, services.NewServerService, services.NewHistoryService, services.NewNotificationService)

// Provider set for controllers
var controllerSet = wire.NewSet(controllers.NewAuthController, controllers.NewServerController, controllers.NewHistoryController)

// App holds all application dependencies
type App struct {
	AuthController    *controllers.AuthController
	ServerController  *controllers.ServerController
	HistoryController *controllers.HistoryController
}
